Archivo 1,Archivo 2,Texto llano (Suffix Array),Tokenizado (Suffix Array),Coincidencias SA (TP),Coincidencias SA (TK)
dataset/1531746.py,dataset/1679741.py,1.92%,4.43%,score = 0 for,( ) ) ) | ( ) ) ) | ( CONST ) : | ( CONST ) : if | ) ) ) ID_9 = | CONST ] * CONST
dataset/1012763.py,dataset/1012765.py,4.01%,3.28%,"print(solve(xs, ys, xt, yt, N, a))","( CONST , [ | , CONST ] ) | , CONST ] ) | = [ ] for"
dataset/1308327.py,dataset/1308139.py,30.22%,35.90%,"+ 1): if y == Y or a[y][x] == 0: for i in range(math.ceil((y - fr) / 2)): a[fr+i][x] = i+1 a[y-i-1][x] = i+1 fr = y + 1 | 0 cnt = a[y].count(0) for i in range(cnt+1): | 1 for c in input()]for i in range(Y)] | < cnt else X-1 | = (K-1)*2 + 1 | = k+1 if k < | for y in range(K-1, Y-K+1):","( ( ID_15 - ID_14 ) / CONST ) ) : ID_9 [ ID_14 + ID_11 ] [ ID_13 ] = ID_11 + CONST ID_9 [ ID_15 - ID_11 - CONST ] [ ID_13 ] = ID_11 + CONST ID_14 = ID_15 + CONST ID_17 = CONST ID_18 = | ( CONST ) for ID_11 in ID_12 ( | ( ID_4 - CONST ) * CONST + CONST | ( ID_4 - CONST , ID_2 - ID_4 + CONST ) : | ) if ID_11 < | + CONST ) : | + CONST ) : | : ID_17 += CONST | : ID_30 = CONST | = ID_9 [ ID_15 ] . | = ID_9 [ ID_15 ] . | = ID_9 [ ID_15 ] [ | ID_11 in ID_12 ( | else ID_3 - CONST | in ID_12 ( ID_2"
dataset/1021922.py,dataset/1021919.py,42.68%,29.60%,""" "".join(results) tokens = sys.stdin.readline().rstrip(""\n"").split() if __name__ == ""__main__"": main(sys.argv) | #!/usr/bin/python import sets import sys def find(parent, x): if parent[x] == x: return x else: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, x, y): | (find(parent_roads, i), find(parent_railways, i)) | - 1, y - 1) | = [int(i) for i in raw_input().split("" "")] | = [int(i) for i in | = [int(i) for i in | = [int(i) for i in xrange(n)]","( CONST ) . | ( CONST ) ] ID_6 ( ID_23 , ID_5 - CONST , ID_7 - CONST ) | ( ID_18 ) : | ( ID_4 , ID_4 [ ID_5 ] ) return ID_4 [ ID_5 ] def ID_6 ( ID_4 , ID_5 , ID_7 ) : | ( ID_4 , ID_5 ) | ( ID_4 , ID_7 ) if | ) ) if not | ) , ID_3 ( | ) == CONST : | , ID_5 - CONST , ID_7 - CONST ) | , ID_7 = [ | . ID_14 ( ) | = ( ID_3 ( | = [ ] for | ID_4 [ ID_5 ] | ID_4 [ ID_5 ] | ] = ID_4 [ | ] ID_23 = ["
dataset/1478030.py,dataset/1478027.py,28.89%,12.16%,"""Fennec"" if score > 0 else ""Snuke"" | % 2 == 0: v = path[i/2] colors[v] = BLACK que_black.append(v) else: v = path[n-i/2-1] colors[v] = WHITE que_white.append(v) def paint(que, c): while len(que) > 0: s = | (N+1) dist[1] = 0 que = | (N+1) n = len(path) que_black, que_white = | [] for i in",% CONST == CONST : | ) > CONST : | + CONST ) } for | - CONST ) : | / CONST - CONST ] | : - CONST ] | : [ ] for | = CONST ID_4 = | > CONST else CONST | CONST ] = CONST | ] + CONST :
dataset/1357280.py,dataset/1357277.py,51.91%,50.00%,"!= maxi: ans = min(ans, solve2()) print ans | (maxx-minx)*(maxy-miny) def solve2_(): res = 2**60 for minx in x: res = min(res, solve2a(minx)) for minx in y: res = min(res, solve2a(minx)) return res def solve2(): res = 2**60 xy = x+y xy.sort() miny = min(x) maxy = max(y) my = min(y) | (maxx-minx)*(maxy-miny)) return res n = int(raw_input()) x = [0]*n y = [0]*n p = [(0,0)]*n mini = maxi = 0 for i in xrange(n): x[i],y[i] = map(int, raw_input().split()) x[i],y[i] = min(x[i],y[i]),max(x[i],y[i]) p[i] = x[i],y[i] if x[i] < x[mini]: mini = i if y[maxi] < y[i]: maxi = i p.sort() ly = [0]*(n+2) | += 1 maxx = max(ly[pi], | 0 for i in xrange(n): | = max(my, p[i][1]) ly[i+1] = my | maxx = max(maxx, x[i])","( ) ) ID_10 = [ CONST ] * ID_8 ID_12 = [ CONST ] * ID_8 | ( ) ) ID_10 [ ID_6 ] , ID_12 [ ID_6 ] = ID_11 ( ID_10 [ ID_6 ] , ID_12 [ ID_6 ] ) , ID_9 ( ID_10 [ ID_6 ] , ID_12 [ ID_6 ] ) | ( ) : ID_15 = CONST ** CONST ID_17 = ID_10 + ID_12 ID_17 . ID_18 ( ) ID_5 = ID_11 ( ID_10 ) ID_3 = ID_9 ( ID_12 ) ID_19 = ID_11 ( ID_12 ) ID_20 = | ( ) if ID_26 != ID_27 : | ( ID_15 , ID_13 ( ID_4 ) ) | ( ID_2 , ID_10 [ ID_6 ] ) | ( ID_2 - ID_4 ) * ( ID_3 - ID_5 ) | ( ID_2 - ID_4 ) * ( ID_3 - ID_5 ) def | ( ID_8 ) : | ( ID_8 ) : | ( ID_8 ) : | ( ID_8 + CONST ) | ) ID_23 [ ID_6 + CONST ] = | ) ID_3 = ID_9 ( | += CONST ID_2 = ID_9 ( | , ID_10 [ ID_6 ] ) | , ID_12 [ ID_6 ] ) | , ID_12 [ ID_6 ] | , ID_16 ( ) ) | . ID_18 ( ) | : ID_2 = ID_9 ( ID_2 , | : ID_26 = ID_6 if ID_12 [ ID_27 ] < ID_12 [ ID_6 ] : ID_27 = ID_6 | : if ID_19 < ID_4 : break while | = ID_11 ( ID_15 , | = ID_9 ( ID_19 , | CONST ] < ID_4 : | CONST for ID_4 in | ID_10 [ ID_6 ] | ID_10 [ ID_6 ] | ID_13 ( ID_4 ) | ID_5 = ID_11 ( | ID_6 in ID_7 ( ID_8 | [ ID_6 ] <"
dataset/1534024.py,dataset/1474762.py,43.51%,12.05%,!= s1: print('POSSIBLE') exit() # 2 n = s2 for g in G: if g[0] == n: n = g[1] else: n = g[0] if n == s1: print('POSSIBLE') exit() print('IMPOSSIBLE') | != start: G.append(helper(n)) n = P[n] | # cycle check try: start = D.index(1) except ValueError: print('POSSIBLE') exit() | 0 while q: t = hq.heappop(q) if i < t: break else: i += | < t: break else: | = S.pop() q = child_L[n] | = [p for p in range(N) if D[p] == 0] L = | = int(input()) P = list(map(lambda | P: D[p] += 1 | collections import defaultdict import heapq as hq | q: t = hq.heappop(q) if,"( ) ) ) | ( CONST ) except | ) - CONST , | : break else : | = [ CONST ] * | CONST ] else : | ID_1 import ID_2 import ID_3 as ID_4 | [ CONST ] == | [ CONST ] if | ] -= CONST if | ] == CONST : | ] == CONST ]"
dataset/1604158.py,dataset/1601396.py,0.00%,9.31%,,( ) ) ) | ) : ID_19 = | = ID_5 ( ID_6 ( | = [ CONST ] * ( | = [ CONST ] | CONST : ID_22 = | ID_24 = ID_25 ( | ] if ID_21 (
dataset/1272054.py,dataset/1155981.py,0.00%,1.75%,,": return CONST . | == CONST : if | CONST ] == CONST | [ CONST ] ,"
dataset/1160494.py,dataset/1479692.py,1.79%,5.42%,"for i in range(1,","( ) ) def | ) : ID_15 = | , ID_9 ) : | - CONST ] , | == CONST : if | CONST else : if | else : return CONST"
